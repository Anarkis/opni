// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/plugins/apis/capability/capability_grpc.pb.go

// Package mock_capability is a generated GoMock package.
package mock_capability

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	capability "github.com/rancher/opni/pkg/plugins/apis/capability"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBackendClient is a mock of BackendClient interface.
type MockBackendClient struct {
	ctrl     *gomock.Controller
	recorder *MockBackendClientMockRecorder
}

// MockBackendClientMockRecorder is the mock recorder for MockBackendClient.
type MockBackendClientMockRecorder struct {
	mock *MockBackendClient
}

// NewMockBackendClient creates a new mock instance.
func NewMockBackendClient(ctrl *gomock.Controller) *MockBackendClient {
	mock := &MockBackendClient{ctrl: ctrl}
	mock.recorder = &MockBackendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendClient) EXPECT() *MockBackendClientMockRecorder {
	return m.recorder
}

// CanInstall mocks base method.
func (m *MockBackendClient) CanInstall(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CanInstall", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanInstall indicates an expected call of CanInstall.
func (mr *MockBackendClientMockRecorder) CanInstall(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanInstall", reflect.TypeOf((*MockBackendClient)(nil).CanInstall), varargs...)
}

// Info mocks base method.
func (m *MockBackendClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*capability.InfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*capability.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBackendClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBackendClient)(nil).Info), varargs...)
}

// Install mocks base method.
func (m *MockBackendClient) Install(ctx context.Context, in *capability.InstallRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Install", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install.
func (mr *MockBackendClientMockRecorder) Install(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockBackendClient)(nil).Install), varargs...)
}

// InstallerTemplate mocks base method.
func (m *MockBackendClient) InstallerTemplate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*capability.InstallerTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallerTemplate", varargs...)
	ret0, _ := ret[0].(*capability.InstallerTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallerTemplate indicates an expected call of InstallerTemplate.
func (mr *MockBackendClientMockRecorder) InstallerTemplate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerTemplate", reflect.TypeOf((*MockBackendClient)(nil).InstallerTemplate), varargs...)
}

// Uninstall mocks base method.
func (m *MockBackendClient) Uninstall(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Uninstall", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockBackendClientMockRecorder) Uninstall(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockBackendClient)(nil).Uninstall), varargs...)
}

// MockBackendServer is a mock of BackendServer interface.
type MockBackendServer struct {
	ctrl     *gomock.Controller
	recorder *MockBackendServerMockRecorder
}

// MockBackendServerMockRecorder is the mock recorder for MockBackendServer.
type MockBackendServerMockRecorder struct {
	mock *MockBackendServer
}

// NewMockBackendServer creates a new mock instance.
func NewMockBackendServer(ctrl *gomock.Controller) *MockBackendServer {
	mock := &MockBackendServer{ctrl: ctrl}
	mock.recorder = &MockBackendServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendServer) EXPECT() *MockBackendServerMockRecorder {
	return m.recorder
}

// CanInstall mocks base method.
func (m *MockBackendServer) CanInstall(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanInstall", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanInstall indicates an expected call of CanInstall.
func (mr *MockBackendServerMockRecorder) CanInstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanInstall", reflect.TypeOf((*MockBackendServer)(nil).CanInstall), arg0, arg1)
}

// Info mocks base method.
func (m *MockBackendServer) Info(arg0 context.Context, arg1 *emptypb.Empty) (*capability.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*capability.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBackendServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBackendServer)(nil).Info), arg0, arg1)
}

// Install mocks base method.
func (m *MockBackendServer) Install(arg0 context.Context, arg1 *capability.InstallRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Install indicates an expected call of Install.
func (mr *MockBackendServerMockRecorder) Install(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockBackendServer)(nil).Install), arg0, arg1)
}

// InstallerTemplate mocks base method.
func (m *MockBackendServer) InstallerTemplate(arg0 context.Context, arg1 *emptypb.Empty) (*capability.InstallerTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallerTemplate", arg0, arg1)
	ret0, _ := ret[0].(*capability.InstallerTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallerTemplate indicates an expected call of InstallerTemplate.
func (mr *MockBackendServerMockRecorder) InstallerTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerTemplate", reflect.TypeOf((*MockBackendServer)(nil).InstallerTemplate), arg0, arg1)
}

// Uninstall mocks base method.
func (m *MockBackendServer) Uninstall(arg0 context.Context, arg1 *emptypb.Empty) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockBackendServerMockRecorder) Uninstall(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockBackendServer)(nil).Uninstall), arg0, arg1)
}

// mustEmbedUnimplementedBackendServer mocks base method.
func (m *MockBackendServer) mustEmbedUnimplementedBackendServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBackendServer")
}

// mustEmbedUnimplementedBackendServer indicates an expected call of mustEmbedUnimplementedBackendServer.
func (mr *MockBackendServerMockRecorder) mustEmbedUnimplementedBackendServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBackendServer", reflect.TypeOf((*MockBackendServer)(nil).mustEmbedUnimplementedBackendServer))
}

// MockUnsafeBackendServer is a mock of UnsafeBackendServer interface.
type MockUnsafeBackendServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBackendServerMockRecorder
}

// MockUnsafeBackendServerMockRecorder is the mock recorder for MockUnsafeBackendServer.
type MockUnsafeBackendServerMockRecorder struct {
	mock *MockUnsafeBackendServer
}

// NewMockUnsafeBackendServer creates a new mock instance.
func NewMockUnsafeBackendServer(ctrl *gomock.Controller) *MockUnsafeBackendServer {
	mock := &MockUnsafeBackendServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBackendServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBackendServer) EXPECT() *MockUnsafeBackendServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBackendServer mocks base method.
func (m *MockUnsafeBackendServer) mustEmbedUnimplementedBackendServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBackendServer")
}

// mustEmbedUnimplementedBackendServer indicates an expected call of mustEmbedUnimplementedBackendServer.
func (mr *MockUnsafeBackendServerMockRecorder) mustEmbedUnimplementedBackendServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBackendServer", reflect.TypeOf((*MockUnsafeBackendServer)(nil).mustEmbedUnimplementedBackendServer))
}
