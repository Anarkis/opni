// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/plugins/apis/capability/plugin.go

// Package mock_capability is a generated GoMock package.
package mock_capability

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CanInstall mocks base method.
func (m *MockBackend) CanInstall() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanInstall")
	ret0, _ := ret[0].(error)
	return ret0
}

// CanInstall indicates an expected call of CanInstall.
func (mr *MockBackendMockRecorder) CanInstall() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanInstall", reflect.TypeOf((*MockBackend)(nil).CanInstall))
}

// Install mocks base method.
func (m *MockBackend) Install(cluster *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockBackendMockRecorder) Install(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockBackend)(nil).Install), cluster)
}

// InstallerTemplate mocks base method.
func (m *MockBackend) InstallerTemplate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallerTemplate")
	ret0, _ := ret[0].(string)
	return ret0
}

// InstallerTemplate indicates an expected call of InstallerTemplate.
func (mr *MockBackendMockRecorder) InstallerTemplate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerTemplate", reflect.TypeOf((*MockBackend)(nil).InstallerTemplate))
}

// Uninstall mocks base method.
func (m *MockBackend) Uninstall(cluster *v1.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockBackendMockRecorder) Uninstall(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockBackend)(nil).Uninstall), cluster)
}
