// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rules/types.go

// Package mock_rules is a generated GoMock package.
package mock_rules

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rulefmt "github.com/prometheus/prometheus/model/rulefmt"
)

// MockRuleFinder is a mock of RuleFinder interface.
type MockRuleFinder struct {
	ctrl     *gomock.Controller
	recorder *MockRuleFinderMockRecorder
}

// MockRuleFinderMockRecorder is the mock recorder for MockRuleFinder.
type MockRuleFinderMockRecorder struct {
	mock *MockRuleFinder
}

// NewMockRuleFinder creates a new mock instance.
func NewMockRuleFinder(ctrl *gomock.Controller) *MockRuleFinder {
	mock := &MockRuleFinder{ctrl: ctrl}
	mock.recorder = &MockRuleFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleFinder) EXPECT() *MockRuleFinderMockRecorder {
	return m.recorder
}

// FindGroups mocks base method.
func (m *MockRuleFinder) FindGroups(ctx context.Context) ([]rulefmt.RuleGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGroups", ctx)
	ret0, _ := ret[0].([]rulefmt.RuleGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGroups indicates an expected call of FindGroups.
func (mr *MockRuleFinderMockRecorder) FindGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroups", reflect.TypeOf((*MockRuleFinder)(nil).FindGroups), ctx)
}

// MockUpdateNotifier is a mock of UpdateNotifier interface.
type MockUpdateNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateNotifierMockRecorder
}

// MockUpdateNotifierMockRecorder is the mock recorder for MockUpdateNotifier.
type MockUpdateNotifierMockRecorder struct {
	mock *MockUpdateNotifier
}

// NewMockUpdateNotifier creates a new mock instance.
func NewMockUpdateNotifier(ctrl *gomock.Controller) *MockUpdateNotifier {
	mock := &MockUpdateNotifier{ctrl: ctrl}
	mock.recorder = &MockUpdateNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateNotifier) EXPECT() *MockUpdateNotifierMockRecorder {
	return m.recorder
}

// NotifyC mocks base method.
func (m *MockUpdateNotifier) NotifyC(ctx context.Context) <-chan []rulefmt.RuleGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyC", ctx)
	ret0, _ := ret[0].(<-chan []rulefmt.RuleGroup)
	return ret0
}

// NotifyC indicates an expected call of NotifyC.
func (mr *MockUpdateNotifierMockRecorder) NotifyC(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyC", reflect.TypeOf((*MockUpdateNotifier)(nil).NotifyC), ctx)
}
