// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/plugins/apis/apiextensions/apiextensions_grpc.pb.go

// Package mock_apiextensions is a generated GoMock package.
package mock_apiextensions

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockManagementAPIExtensionClient is a mock of ManagementAPIExtensionClient interface.
type MockManagementAPIExtensionClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIExtensionClientMockRecorder
}

// MockManagementAPIExtensionClientMockRecorder is the mock recorder for MockManagementAPIExtensionClient.
type MockManagementAPIExtensionClientMockRecorder struct {
	mock *MockManagementAPIExtensionClient
}

// NewMockManagementAPIExtensionClient creates a new mock instance.
func NewMockManagementAPIExtensionClient(ctrl *gomock.Controller) *MockManagementAPIExtensionClient {
	mock := &MockManagementAPIExtensionClient{ctrl: ctrl}
	mock.recorder = &MockManagementAPIExtensionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIExtensionClient) EXPECT() *MockManagementAPIExtensionClientMockRecorder {
	return m.recorder
}

// Descriptor mocks base method.
func (m *MockManagementAPIExtensionClient) Descriptor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*descriptorpb.ServiceDescriptorProto, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Descriptor", varargs...)
	ret0, _ := ret[0].(*descriptorpb.ServiceDescriptorProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Descriptor indicates an expected call of Descriptor.
func (mr *MockManagementAPIExtensionClientMockRecorder) Descriptor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptor", reflect.TypeOf((*MockManagementAPIExtensionClient)(nil).Descriptor), varargs...)
}

// MockManagementAPIExtensionServer is a mock of ManagementAPIExtensionServer interface.
type MockManagementAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockManagementAPIExtensionServerMockRecorder
}

// MockManagementAPIExtensionServerMockRecorder is the mock recorder for MockManagementAPIExtensionServer.
type MockManagementAPIExtensionServerMockRecorder struct {
	mock *MockManagementAPIExtensionServer
}

// NewMockManagementAPIExtensionServer creates a new mock instance.
func NewMockManagementAPIExtensionServer(ctrl *gomock.Controller) *MockManagementAPIExtensionServer {
	mock := &MockManagementAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockManagementAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagementAPIExtensionServer) EXPECT() *MockManagementAPIExtensionServerMockRecorder {
	return m.recorder
}

// Descriptor mocks base method.
func (m *MockManagementAPIExtensionServer) Descriptor(arg0 context.Context, arg1 *emptypb.Empty) (*descriptorpb.ServiceDescriptorProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Descriptor", arg0, arg1)
	ret0, _ := ret[0].(*descriptorpb.ServiceDescriptorProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Descriptor indicates an expected call of Descriptor.
func (mr *MockManagementAPIExtensionServerMockRecorder) Descriptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Descriptor", reflect.TypeOf((*MockManagementAPIExtensionServer)(nil).Descriptor), arg0, arg1)
}

// mustEmbedUnimplementedManagementAPIExtensionServer mocks base method.
func (m *MockManagementAPIExtensionServer) mustEmbedUnimplementedManagementAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIExtensionServer")
}

// mustEmbedUnimplementedManagementAPIExtensionServer indicates an expected call of mustEmbedUnimplementedManagementAPIExtensionServer.
func (mr *MockManagementAPIExtensionServerMockRecorder) mustEmbedUnimplementedManagementAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIExtensionServer", reflect.TypeOf((*MockManagementAPIExtensionServer)(nil).mustEmbedUnimplementedManagementAPIExtensionServer))
}

// MockUnsafeManagementAPIExtensionServer is a mock of UnsafeManagementAPIExtensionServer interface.
type MockUnsafeManagementAPIExtensionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeManagementAPIExtensionServerMockRecorder
}

// MockUnsafeManagementAPIExtensionServerMockRecorder is the mock recorder for MockUnsafeManagementAPIExtensionServer.
type MockUnsafeManagementAPIExtensionServerMockRecorder struct {
	mock *MockUnsafeManagementAPIExtensionServer
}

// NewMockUnsafeManagementAPIExtensionServer creates a new mock instance.
func NewMockUnsafeManagementAPIExtensionServer(ctrl *gomock.Controller) *MockUnsafeManagementAPIExtensionServer {
	mock := &MockUnsafeManagementAPIExtensionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeManagementAPIExtensionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeManagementAPIExtensionServer) EXPECT() *MockUnsafeManagementAPIExtensionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedManagementAPIExtensionServer mocks base method.
func (m *MockUnsafeManagementAPIExtensionServer) mustEmbedUnimplementedManagementAPIExtensionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedManagementAPIExtensionServer")
}

// mustEmbedUnimplementedManagementAPIExtensionServer indicates an expected call of mustEmbedUnimplementedManagementAPIExtensionServer.
func (mr *MockUnsafeManagementAPIExtensionServerMockRecorder) mustEmbedUnimplementedManagementAPIExtensionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedManagementAPIExtensionServer", reflect.TypeOf((*MockUnsafeManagementAPIExtensionServer)(nil).mustEmbedUnimplementedManagementAPIExtensionServer))
}
