syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/apis/control/v1";

import "google/protobuf/empty.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/kralicky/totem/extensions.proto";

package control;

service Health {
  rpc GetHealth(google.protobuf.Empty) returns (core.Health);
}

service HealthListener {
  rpc UpdateHealth(core.Health) returns (google.protobuf.Empty);
}

service PluginSync {
  rpc SyncPluginManifest(PluginManifest) returns (PluginArchive);
  rpc GetPluginManifest(google.protobuf.Empty) returns (PluginManifest);
}

enum PatchOp {
  // revisions match
  None = 0;
  // same plugin exists on both
  Update = 1;
  // missing plugin on agent
  Create = 2;
  // outdated plugin on agent, with no version on the gateway
  Remove = 3;
  // same plugin contents and module name, but the file name is different
  Rename = 4;
}

message PluginManifestEntry {
  string binaryPath = 1;
  string goVersion = 2;
  string module = 3;
  string shortName = 4;
  string digest = 5;
}

message PluginManifest {
  repeated PluginManifestEntry items = 1;
}

// opPath should be empty when op == PatchRename
// bytes should be empty when op == PatchRemove
message PluginArchiveEntry {
  string module = 1;
  PatchOp op = 2;
  bytes data = 3;
  string agentPath = 4;
  string gatewayPath = 5;
  string oldDigest = 6;
  string newDigest = 7;
  string shortName = 8;
}

message PluginArchive {
  repeated PluginArchiveEntry items = 1;
}
