syntax = "proto3";
option go_package = "github.com/rancher/opni/pkg/alerting/v1alpha";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";

service Alerting {
  // ------- Trigger Alerts -------

  // unimplemented
  rpc TriggerAlerts(TriggerAlertsRequest) returns (TriggerAlertsResponse) {
    option (google.api.http) = {
      post: "/alerts/trigger"
      body: "*"
    };
  }

  // ------- CRUD for alerting events log -------

  // alerting internal use only
  rpc CreateAlertLog(core.AlertLog) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/log"
      body: "*"
    }; 
  }

  
  // unimplemented
  rpc GetAlertLog(core.Reference) returns (core.AlertLog) {
    option (google.api.http) = {
      get: "/alerts/events/{id}"
    };
  }

  rpc ListAlertLogs(ListAlertLogRequest) returns (InformativeAlertLogList) {
    option (google.api.http) = {
      get: "/alerts/events"
    };
  }
  // unimplemented
  rpc UpdateAlertLog(UpdateAlertLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/events"
      body: "*"
    };
  }
  // alerting internal use only (for now)
  rpc DeleteAlertLog(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/events"
    };
  }

  // -------- CRUD for alerting conditions -------

  rpc CreateAlertCondition(AlertCondition) returns(core.Reference) {
    option (google.api.http) = {
      post: "/alerts/conditions"
      body: "*"
    };
  }

  rpc GetAlertCondition(core.Reference) returns (AlertCondition) {
    option (google.api.http) = {
      get: "/alerts/conditions/{id}"
    };
  }

  rpc ListAlertConditions(ListAlertConditionRequest) returns (AlertConditionList) {
    option (google.api.http) = {
      get: "/alerts/conditions"
    };
  }

  rpc UpdateAlertCondition(UpdateAlertConditionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/conditions"
      body: "*"
    };
  }

  rpc DeleteAlertCondition(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/conditions"
    };
  }

  rpc PreviewAlertCondition(PreviewAlertConditionRequest) returns (PreviewAlertConditionResponse) {
    option (google.api.http) = {
      post: "/alerts/conditions/preview"
      body: "*"
    };
  }

  // -------- CRUD for alerting endpoints ----
  
  rpc CreateAlertEndpoint(AlertEndpoint) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/endpoints"
      body: "*"
    };
  }

  rpc GetAlertEndpoint(core.Reference) returns (AlertEndpoint) {
    option (google.api.http) = {
      get: "/alerts/endpoints/{id}"
    };
  }

  rpc ListAlertEndpoints(ListAlertEndpointsRequest) returns (AlertEndpointList) {
    option (google.api.http) = {
      get: "/alerts/endpoints"
    };
  }

  rpc UpdateAlertEndpoint(UpdateAlertEndpointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/endpoints"
      body: "*"
    };
  }

  rpc DeleteAlertEndpoint(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/endpoints/{id}"
    };
  }

  // unimplemented
  rpc TestAlertEndpoint(TestAlertEndpointRequest) returns (TestAlertEndpointResponse) {
    option (google.api.http) = {
      post: "/alerts/endpoints/test"
      body: "*"
    };
  }
  

  // alerting internal use only
  rpc CreateEndpointImplementation(CreateImplementation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/alerts/endpoints/implementation"
      body: "*"
    };
  }

  // alerting internal use only
  rpc UpdateEndpointImplementation(CreateImplementation) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/alerts/endpoints/implementation"
      body: "*"
    };
  }

  // alerting internal use only
  // conditionMustBePassed in here
  rpc DeleteEndpointImplementation(core.Reference) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/alerts/endpoints/implementation"
    };
  }
}

message TriggerAlertsRequest {
  core.Reference id =1;
}

message TriggerAlertsResponse {
}

message ListAlertLogRequest {
  repeated string labels = 1;
  uint64 limit  = 2;
  google.protobuf.Timestamp startTimestamp  = 3;
  google.protobuf.Timestamp endTimestamp = 4;
}

message UpdateAlertLogRequest {
  string id = 1;
  core.AlertLog UpdateAlert = 2;
}

enum Severity {
  INFO = 0;
  WARNING = 1;
  ERROR = 2;
  CRITICAL = 3;
}

message AlertCondition {
  string name = 1;
  string description = 2;
  repeated string labels = 3;
  Severity severity = 4;
  oneof alertType {
    AlertConditionSystem system = 5;
  }
  optional string notificationId = 6;
  EndpointImplementation details = 7; 
}

message AlertConditionSystem{}

message AlertConditionList {
  repeated AlertConditionWithId items = 1;
}

message AlertConditionWithId {
  core.Reference id = 1;
  AlertCondition alertCondition = 2;
}

message ListAlertConditionRequest {
}

message UpdateAlertConditionRequest {
  core.Reference id = 1;
  AlertCondition updateAlert = 2;
}

message PreviewAlertConditionRequest {
}

message PreviewAlertConditionResponse {
}


message EndpointImplementation {
  string Title = 1;
  string Body = 2; 
}

message CreateImplementation {
  core.Reference endpointId  = 1;
  core.Reference  conditionId = 2;
  EndpointImplementation implementation = 3;
}

message AlertEndpoint {
   string name = 1;
   string description = 2;
   oneof endpoint {
    SlackEndpoint slack = 4;
    EmailEndpoint email = 5;
   }
}

message SlackEndpoint {
  string name = 1;
  string apiUrl = 2;
  string channel = 3;
}

message SlackImplementation {
  string title = 1;
  string text = 2;
  string footer = 3;
  string imageUrl = 4;
}

message EmailEndpoint {
  string name = 1;
  string to = 2;
  optional string from = 3;
}

message EmailImplementation {
  optional string htmlBody = 1;
  optional string textBody = 2; 
}

message AlertEndpointList {
  repeated AlertEndpointWithId items = 1;
}

message AlertEndpointWithId {
  AlertEndpoint endpoint = 1;
  core.Reference id = 2;
}

message InformativeAlertLog {
  AlertCondition condition = 1;
  core.AlertLog log = 2;
}

message InformativeAlertLogList {
  repeated InformativeAlertLog items = 1;
}

message ListAlertEndpointsRequest {

}
message UpdateAlertEndpointRequest {
  core.Reference id = 1;
  AlertEndpoint UpdateAlert = 2;
}

message TestAlertEndpointRequest{
}
message TestAlertEndpointResponse {
}