image:
  repository: docker.io/joekralicky/cortex
  tag: v1.11.0
nginx:
  enabled: false
config:
  server:
    log_level: debug
    http_tls_config: &tls_server_config
      cert_file: /run/cortex/certs/server/tls.crt
      key_file: /run/cortex/certs/server/tls.key
      client_ca_file: /run/cortex/certs/client/ca.crt
      client_auth_type: RequireAndVerifyClientCert
    grpc_tls_config: *tls_server_config
  alertmanager:
    alertmanager_client: &tls_client_config
      tls_enabled: true
      tls_cert_path: /run/cortex/certs/client/tls.crt
      tls_key_path: /run/cortex/certs/client/tls.key
      tls_ca_path: /run/cortex/certs/client/ca.crt
      tls_server_name: cortex-server
    enable_api: true
  querier:
    store_gateway_client: *tls_client_config
  frontend:
    grpc_client_config: *tls_client_config
  frontend_worker:
    grpc_client_config: *tls_client_config
  ingester_client:
    grpc_client_config: *tls_client_config
  ruler:
    ruler_client: *tls_client_config
  alertmanager_storage:
    backend: filesystem
    filesystem:
      dir: /opt/cortex-data/alertmanager
  auth_enabled: true
  blocks_storage:
    backend: filesystem
    bucket_store:
      sync_dir: /data
    filesystem:
      dir: /opt/cortex-data/blocks
    tsdb:
      dir: /data
  ruler_storage:
    backend: filesystem
    filesystem:
      dir: /opt/cortex-data/ruler
  storage:
    engine: blocks
  tenant_federation:
    enabled: true
alertmanager:
  startupProbe: &mtls_probe
    exec:
      command:
        - /usr/bin/curl
        - -k
        - https://127.0.0.1:8080/ready
        - --key
        - /run/cortex/certs/client/tls.key
        - --cert
        - /run/cortex/certs/client/tls.crt
        - --cacert
        - /run/cortex/certs/client/ca.crt
    httpGet: null
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: &cert_volume_mounts
    - mountPath: /run/cortex/certs/server
      name: server-certs
      readOnly: true
    - mountPath: /run/cortex/certs/client
      name: client-certs
      readOnly: true
  extraVolumes: &cert_volumes
    - name: server-certs
      secret:
        secretName: cortex-serving-cert-keys
        defaultMode: 256
        items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
    - name: client-certs
      secret:
        secretName: cortex-client-cert-keys
        defaultMode: 256
        items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: ca.crt
            path: ca.crt
querier:
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
ingester:
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
distributor:
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
ruler:
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
query_frontend:
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
store_gateway:
  persistentVolume:
    enabled: false
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
compactor:
  persistentVolume:
    enabled: false
  startupProbe: *mtls_probe
  livenessProbe: *mtls_probe
  readinessProbe: *mtls_probe
  extraVolumeMounts: *cert_volume_mounts
  extraVolumes: *cert_volumes
kvstore:
  store: memberlist
