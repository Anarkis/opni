syntax = "proto3";
option go_package = "github.cim/rancher/opni/plugins/metrics/pkg/apis/remoteread";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";

package remoteread;

service RemoteRead {
  // todo: we probably need a new type for Describe and ScanFor
//  rpc ScanForTargets(google.protobuf.Empty) returns (stream Target);
//  rpc Describe(Target) returns (Target);

  rpc AddTarget(TargetAddRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/remoteread/target/add"
    };
  }

  rpc EditTarget(TargetEditRequest) returns (google.protobuf.Empty);
  rpc RemoveTarget(TargetRemoveRequest) returns (google.protobuf.Empty);
  rpc ListTargets(TargetListRequest) returns (TargetList);
  rpc Start(StartReadRequest) returns (google.protobuf.Empty);
//  rpc GetProgress(ProgressRequest) returns (stream Progress);
  rpc Stop(StopReadRequest) returns (google.protobuf.Empty);
}

message Target {
  string endpoint = 1;
  string name = 2;
  TargetMetadata meta = 4;
}

message TargetMetadata {
  google.protobuf.Timestamp lastReadTimestamp = 1;
}

message TargetDiff {
  string endpoint = 1;
  string name = 2;
}

message TargetList {
  repeated Target targets = 1;
}

message TargetAddRequest {
  Target target = 1;
  string clusterId = 2;
}

message TargetEditRequest {
  string targetName = 1;
  TargetDiff targetDiff = 2;
  string clusterId = 3;
}

message TargetRemoveRequest {
  string targetName = 1;
  string clusterId = 2;
}

message TargetListRequest {
  string clusterId = 1;
}

message StartReadRequest {
  string targetName = 1;
  Query query = 2;

  // allow for forcing a remote read when Query.startTimestamp > Target.meta.lastReadTimestamp
  bool forceOverlap = 3;

  string clusterId = 4;
}

//message ProgressRequest {
//  string targetName = 1;
//  string clusterId = 2;
//
//}

message StopReadRequest {
  string targetName = 1;
  string clusterId = 2;
}

// PromQL query
message Query {
  google.protobuf.Timestamp startTimestamp = 1;
  google.protobuf.Timestamp endTimestamp = 2;
  repeated LabelMatcher matchers = 3;
}

message LabelMatcher {
  enum Type {
    EQUAL  = 0;
    NOT_EQUAL = 1;
    REGEX_EQUAL  = 2;
    NOT_REGEX_EQUAL = 3;
  }

  Type type    = 1;
  string name  = 2;
  string value = 3;
}

message Progress {
  google.protobuf.Timestamp startTimestamp = 1;
  google.protobuf.Timestamp endTimestamp = 2;
  float percentDone = 3;
}
