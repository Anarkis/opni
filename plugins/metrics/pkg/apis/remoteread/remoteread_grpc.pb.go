// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.cim/rancher/opni/plugins/metrics/pkg/apis/remoteread/remoteread.proto

package remoteread

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteReadClient is the client API for RemoteRead service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteReadClient interface {
	AddTarget(ctx context.Context, in *TargetAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditTarget(ctx context.Context, in *TargetEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveTarget(ctx context.Context, in *TargetRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTargets(ctx context.Context, in *TargetListRequest, opts ...grpc.CallOption) (*TargetList, error)
	Start(ctx context.Context, in *StartReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// rpc GetProgress(ProgressRequest) returns (stream Progress);
	Stop(ctx context.Context, in *StopReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteReadClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteReadClient(cc grpc.ClientConnInterface) RemoteReadClient {
	return &remoteReadClient{cc}
}

func (c *remoteReadClient) AddTarget(ctx context.Context, in *TargetAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/AddTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteReadClient) EditTarget(ctx context.Context, in *TargetEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/EditTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteReadClient) RemoveTarget(ctx context.Context, in *TargetRemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/RemoveTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteReadClient) ListTargets(ctx context.Context, in *TargetListRequest, opts ...grpc.CallOption) (*TargetList, error) {
	out := new(TargetList)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/ListTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteReadClient) Start(ctx context.Context, in *StartReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteReadClient) Stop(ctx context.Context, in *StopReadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remoteread.RemoteRead/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteReadServer is the server API for RemoteRead service.
// All implementations must embed UnimplementedRemoteReadServer
// for forward compatibility
type RemoteReadServer interface {
	AddTarget(context.Context, *TargetAddRequest) (*emptypb.Empty, error)
	EditTarget(context.Context, *TargetEditRequest) (*emptypb.Empty, error)
	RemoveTarget(context.Context, *TargetRemoveRequest) (*emptypb.Empty, error)
	ListTargets(context.Context, *TargetListRequest) (*TargetList, error)
	Start(context.Context, *StartReadRequest) (*emptypb.Empty, error)
	// rpc GetProgress(ProgressRequest) returns (stream Progress);
	Stop(context.Context, *StopReadRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteReadServer()
}

// UnimplementedRemoteReadServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteReadServer struct {
}

func (UnimplementedRemoteReadServer) AddTarget(context.Context, *TargetAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTarget not implemented")
}
func (UnimplementedRemoteReadServer) EditTarget(context.Context, *TargetEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTarget not implemented")
}
func (UnimplementedRemoteReadServer) RemoveTarget(context.Context, *TargetRemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTarget not implemented")
}
func (UnimplementedRemoteReadServer) ListTargets(context.Context, *TargetListRequest) (*TargetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}
func (UnimplementedRemoteReadServer) Start(context.Context, *StartReadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedRemoteReadServer) Stop(context.Context, *StopReadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedRemoteReadServer) mustEmbedUnimplementedRemoteReadServer() {}

// UnsafeRemoteReadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteReadServer will
// result in compilation errors.
type UnsafeRemoteReadServer interface {
	mustEmbedUnimplementedRemoteReadServer()
}

func RegisterRemoteReadServer(s grpc.ServiceRegistrar, srv RemoteReadServer) {
	s.RegisterService(&RemoteRead_ServiceDesc, srv)
}

func _RemoteRead_AddTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).AddTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/AddTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).AddTarget(ctx, req.(*TargetAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRead_EditTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).EditTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/EditTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).EditTarget(ctx, req.(*TargetEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRead_RemoveTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).RemoveTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/RemoveTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).RemoveTarget(ctx, req.(*TargetRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRead_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).ListTargets(ctx, req.(*TargetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRead_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).Start(ctx, req.(*StartReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteRead_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteReadServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remoteread.RemoteRead/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteReadServer).Stop(ctx, req.(*StopReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteRead_ServiceDesc is the grpc.ServiceDesc for RemoteRead service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteRead_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remoteread.RemoteRead",
	HandlerType: (*RemoteReadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTarget",
			Handler:    _RemoteRead_AddTarget_Handler,
		},
		{
			MethodName: "EditTarget",
			Handler:    _RemoteRead_EditTarget_Handler,
		},
		{
			MethodName: "RemoveTarget",
			Handler:    _RemoteRead_RemoveTarget_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _RemoteRead_ListTargets_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _RemoteRead_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _RemoteRead_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.cim/rancher/opni/plugins/metrics/pkg/apis/remoteread/remoteread.proto",
}
