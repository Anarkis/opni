syntax = "proto3";
option go_package = "github.com/rancher/opni/plugins/pkg/apis/server/endpoint";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";
import "google/rpc/status.proto";

import "github.com/rancher/opni/pkg/apis/core/v1/core.proto";
import "github.com/rancher/opni/pkg/apis/alerting/v1/alerting.proto";

package alerting.endpoint;

service AlertEndpoints{
    // -------- CRUD for alerting endpoints ----

  rpc CreateAlertEndpoint(alerting.AlertEndpoint) returns (core.Reference) {
    option (google.api.http) = {
      post : "/configure"
      body : "*"
    };
  }

  rpc GetAlertEndpoint(core.Reference) returns (alerting.AlertEndpoint) {
    option (google.api.http) = {
      post : "/list/{id}"
      body : "*"
    };
  }

  rpc ListAlertEndpoints(alerting.ListAlertEndpointsRequest)
      returns (alerting.AlertEndpointList) {
    option (google.api.http) = {
      get : "/list"
    };
  }

  // when forceUpdate = false, 
  // returns a list of conditions this would affect (if none, applies the update)
  // when forceUpdate = true, 
  //  updates everything without warning
  rpc UpdateAlertEndpoint(alerting.UpdateAlertEndpointRequest)
      returns (alerting.InvolvedConditions) {
    option (google.api.http) = {
      put : "/configure"
      body : "*"
    };
  }

  // when forceDelete = false,
  // returns a list of conditions this would affect (if none, applies the delete)
  // when forceDelete = true
  // deletes and applies the consequences of those changes to everything without warning
  rpc DeleteAlertEndpoint(alerting.DeleteAlertEndpointRequest) 
  returns (alerting.InvolvedConditions) {
    option (google.api.http) = {
      post : "/delete/{id.id}"
    };
  }

  rpc EphemeralDispatcher(alerting.EphemeralDispatcherRequest)
      returns (alerting.EphemeralDispatcherResponse) {
      option (google.api.http) = {
        post : "/ephemeral"
        body : "*"
      };
  }

  rpc TestAlertEndpoint(alerting.TestAlertEndpointRequest)
      returns (alerting.TestAlertEndpointResponse) {
    option (google.api.http) = {
      post : "/test"
      body : "*"
    };
  }
  
  // alerting internal use only
  rpc ListRoutingRelationships(google.protobuf.Empty) 
      returns (alerting.RoutingRelationships) {
  }

  // alerting internal use only
  // creates a node in the alertmanager config to be routed to 
  // by the conditionId
  // it uses the endpoint id to fetch the implementation type
  // and attaches the remaining details to that endpoint
  rpc CreateConditionRoutingNode(alerting.RoutingNode)
      returns (google.protobuf.Empty) {
  }

  // alerting internal use only
  // updates a node in the alertmanager config to be routed to
  // by the conditionId
  // it uses the endpoint id to fetch (&update if necessary)
  rpc UpdateConditionRoutingNode(alerting.RoutingNode)
      returns (google.protobuf.Empty) {
  }

  // alerting internal use only
  // conditionMustBePassed in here
  rpc DeleteConditionRoutingNode(core.Reference)
      returns (google.protobuf.Empty) {
  }

  // alerting internal use only
  // If a defined endpoint is changed then change its references in the
  // routing tree
  rpc UpdateIndividualEndpointInRoutingNode(alerting.FullAttachedEndpoint)
      returns (google.protobuf.Empty) {
  }

  // alerting internal use only
  // If a defined endpoint is deleted then delete it from the routing
  // tree
  rpc DeleteIndividualEndpointInRoutingNode(core.Reference)
      returns (google.protobuf.Empty) {
  }
}