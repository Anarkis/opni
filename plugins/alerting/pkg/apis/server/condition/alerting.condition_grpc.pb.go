// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - ragu               v1.0.0
// source: github.com/rancher/opni/plugins/pkg/apis/server/condition/alerting.condition.proto

package condition

import (
	context "context"
	v1 "github.com/rancher/opni/pkg/apis/core/v1"
	common "github.com/rancher/opni/plugins/alerting/pkg/apis/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertConditionsClient is the client API for AlertConditions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertConditionsClient interface {
	CreateAlertCondition(ctx context.Context, in *common.AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error)
	GetAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertCondition, error)
	ListAlertConditions(ctx context.Context, in *common.ListAlertConditionRequest, opts ...grpc.CallOption) (*common.AlertConditionList, error)
	UpdateAlertCondition(ctx context.Context, in *common.UpdateAlertConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAlertConditionChoices(ctx context.Context, in *common.AlertDetailChoicesRequest, opts ...grpc.CallOption) (*common.ListAlertTypeDetails, error)
	DeleteAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AlertConditionStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertStatusResponse, error)
	ActivateSilence(ctx context.Context, in *common.SilenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// id corresponds to conditionId
	DeactivateSilence(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Timeline(ctx context.Context, in *common.TimelineRequest, opts ...grpc.CallOption) (*common.TimelineResponse, error)
}

type alertConditionsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertConditionsClient(cc grpc.ClientConnInterface) AlertConditionsClient {
	return &alertConditionsClient{cc}
}

func (c *alertConditionsClient) CreateAlertCondition(ctx context.Context, in *common.AlertCondition, opts ...grpc.CallOption) (*v1.Reference, error) {
	out := new(v1.Reference)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/CreateAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) GetAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertCondition, error) {
	out := new(common.AlertCondition)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/GetAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) ListAlertConditions(ctx context.Context, in *common.ListAlertConditionRequest, opts ...grpc.CallOption) (*common.AlertConditionList, error) {
	out := new(common.AlertConditionList)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/ListAlertConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) UpdateAlertCondition(ctx context.Context, in *common.UpdateAlertConditionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/UpdateAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) ListAlertConditionChoices(ctx context.Context, in *common.AlertDetailChoicesRequest, opts ...grpc.CallOption) (*common.ListAlertTypeDetails, error) {
	out := new(common.ListAlertTypeDetails)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/ListAlertConditionChoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) DeleteAlertCondition(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/DeleteAlertCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) AlertConditionStatus(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*common.AlertStatusResponse, error) {
	out := new(common.AlertStatusResponse)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/AlertConditionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) ActivateSilence(ctx context.Context, in *common.SilenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/ActivateSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) DeactivateSilence(ctx context.Context, in *v1.Reference, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/DeactivateSilence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertConditionsClient) Timeline(ctx context.Context, in *common.TimelineRequest, opts ...grpc.CallOption) (*common.TimelineResponse, error) {
	out := new(common.TimelineResponse)
	err := c.cc.Invoke(ctx, "/alerting.condition.AlertConditions/Timeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertConditionsServer is the server API for AlertConditions service.
// All implementations must embed UnimplementedAlertConditionsServer
// for forward compatibility
type AlertConditionsServer interface {
	CreateAlertCondition(context.Context, *common.AlertCondition) (*v1.Reference, error)
	GetAlertCondition(context.Context, *v1.Reference) (*common.AlertCondition, error)
	ListAlertConditions(context.Context, *common.ListAlertConditionRequest) (*common.AlertConditionList, error)
	UpdateAlertCondition(context.Context, *common.UpdateAlertConditionRequest) (*emptypb.Empty, error)
	ListAlertConditionChoices(context.Context, *common.AlertDetailChoicesRequest) (*common.ListAlertTypeDetails, error)
	DeleteAlertCondition(context.Context, *v1.Reference) (*emptypb.Empty, error)
	AlertConditionStatus(context.Context, *v1.Reference) (*common.AlertStatusResponse, error)
	ActivateSilence(context.Context, *common.SilenceRequest) (*emptypb.Empty, error)
	// id corresponds to conditionId
	DeactivateSilence(context.Context, *v1.Reference) (*emptypb.Empty, error)
	Timeline(context.Context, *common.TimelineRequest) (*common.TimelineResponse, error)
	mustEmbedUnimplementedAlertConditionsServer()
}

// UnimplementedAlertConditionsServer must be embedded to have forward compatible implementations.
type UnimplementedAlertConditionsServer struct {
}

func (UnimplementedAlertConditionsServer) CreateAlertCondition(context.Context, *common.AlertCondition) (*v1.Reference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertCondition not implemented")
}
func (UnimplementedAlertConditionsServer) GetAlertCondition(context.Context, *v1.Reference) (*common.AlertCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertCondition not implemented")
}
func (UnimplementedAlertConditionsServer) ListAlertConditions(context.Context, *common.ListAlertConditionRequest) (*common.AlertConditionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertConditions not implemented")
}
func (UnimplementedAlertConditionsServer) UpdateAlertCondition(context.Context, *common.UpdateAlertConditionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertCondition not implemented")
}
func (UnimplementedAlertConditionsServer) ListAlertConditionChoices(context.Context, *common.AlertDetailChoicesRequest) (*common.ListAlertTypeDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertConditionChoices not implemented")
}
func (UnimplementedAlertConditionsServer) DeleteAlertCondition(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertCondition not implemented")
}
func (UnimplementedAlertConditionsServer) AlertConditionStatus(context.Context, *v1.Reference) (*common.AlertStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertConditionStatus not implemented")
}
func (UnimplementedAlertConditionsServer) ActivateSilence(context.Context, *common.SilenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSilence not implemented")
}
func (UnimplementedAlertConditionsServer) DeactivateSilence(context.Context, *v1.Reference) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSilence not implemented")
}
func (UnimplementedAlertConditionsServer) Timeline(context.Context, *common.TimelineRequest) (*common.TimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeline not implemented")
}
func (UnimplementedAlertConditionsServer) mustEmbedUnimplementedAlertConditionsServer() {}

// UnsafeAlertConditionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertConditionsServer will
// result in compilation errors.
type UnsafeAlertConditionsServer interface {
	mustEmbedUnimplementedAlertConditionsServer()
}

func RegisterAlertConditionsServer(s grpc.ServiceRegistrar, srv AlertConditionsServer) {
	s.RegisterService(&AlertConditions_ServiceDesc, srv)
}

func _AlertConditions_CreateAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AlertCondition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).CreateAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/CreateAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).CreateAlertCondition(ctx, req.(*common.AlertCondition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_GetAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).GetAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/GetAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).GetAlertCondition(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_ListAlertConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListAlertConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).ListAlertConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/ListAlertConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).ListAlertConditions(ctx, req.(*common.ListAlertConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_UpdateAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateAlertConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).UpdateAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/UpdateAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).UpdateAlertCondition(ctx, req.(*common.UpdateAlertConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_ListAlertConditionChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.AlertDetailChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).ListAlertConditionChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/ListAlertConditionChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).ListAlertConditionChoices(ctx, req.(*common.AlertDetailChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_DeleteAlertCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).DeleteAlertCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/DeleteAlertCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).DeleteAlertCondition(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_AlertConditionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).AlertConditionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/AlertConditionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).AlertConditionStatus(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_ActivateSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SilenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).ActivateSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/ActivateSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).ActivateSilence(ctx, req.(*common.SilenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_DeactivateSilence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Reference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).DeactivateSilence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/DeactivateSilence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).DeactivateSilence(ctx, req.(*v1.Reference))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertConditions_Timeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertConditionsServer).Timeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alerting.condition.AlertConditions/Timeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertConditionsServer).Timeline(ctx, req.(*common.TimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertConditions_ServiceDesc is the grpc.ServiceDesc for AlertConditions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertConditions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alerting.condition.AlertConditions",
	HandlerType: (*AlertConditionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlertCondition",
			Handler:    _AlertConditions_CreateAlertCondition_Handler,
		},
		{
			MethodName: "GetAlertCondition",
			Handler:    _AlertConditions_GetAlertCondition_Handler,
		},
		{
			MethodName: "ListAlertConditions",
			Handler:    _AlertConditions_ListAlertConditions_Handler,
		},
		{
			MethodName: "UpdateAlertCondition",
			Handler:    _AlertConditions_UpdateAlertCondition_Handler,
		},
		{
			MethodName: "ListAlertConditionChoices",
			Handler:    _AlertConditions_ListAlertConditionChoices_Handler,
		},
		{
			MethodName: "DeleteAlertCondition",
			Handler:    _AlertConditions_DeleteAlertCondition_Handler,
		},
		{
			MethodName: "AlertConditionStatus",
			Handler:    _AlertConditions_AlertConditionStatus_Handler,
		},
		{
			MethodName: "ActivateSilence",
			Handler:    _AlertConditions_ActivateSilence_Handler,
		},
		{
			MethodName: "DeactivateSilence",
			Handler:    _AlertConditions_DeactivateSilence_Handler,
		},
		{
			MethodName: "Timeline",
			Handler:    _AlertConditions_Timeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/rancher/opni/plugins/pkg/apis/server/condition/alerting.condition.proto",
}
