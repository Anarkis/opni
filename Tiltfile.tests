load('ext://tests/golang', 'test_go')

bundle = local("curl -fsSL https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/v0.52.1/bundle.yaml", quiet=True)

k8s_yaml(bundle)

def name(c):
  return c['metadata']['name']

def decode(yaml):
  resources = decode_yaml_stream(bundle)

  # workaround a bug in decode_yaml_stream where it returns duplicates
  # This bug has been fixed in Tilt v0.17.3+
  filtered = []
  names = {}
  for r in resources:
    if r == None:
      continue

    n = '%s:%s' % (name(r), r['kind'])
    if n in names:
      continue

    names[n] = True
    filtered.append(r)

  return filtered

k8s_resource("prometheus-operator", labels="prometheus")

crds = [r for r in decode(bundle) if (r['kind'] == 'CustomResourceDefinition')]

if len(crds):
  # Deploy the prometheus CRDs as a separate resource, after the operator is
  # available.
  k8s_resource(
    new_name='prometheus-crds',
    objects = [('%s' % name(c)) for c in crds],
    resource_deps=['uncategorized', 'prometheus-operator'],
    labels="prometheus")

  # Wait until the CRDs are ready.
  local_resource(
    'prometheus-crds-ready',
    cmd=' && '.join([('kubectl wait --for=condition=Established crd %s' % name(c)) for c in crds]),
    resource_deps=['prometheus-crds'],
    labels="prometheus")

k8s_yaml("config/e2e/prometheus-namespace.yaml")

k8s_yaml([
        "config/e2e/prometheus.yaml",
        "config/e2e/service.yaml"])

k8s_resource(
    new_name="prometheus",
    objects = [
        'test-prometheus:Service',
        'test-prometheus:Prometheus',
    ],
    extra_pod_selectors={'prometheus': 'test-prometheus'},
    resource_deps=['prometheus-crds-ready'],
    labels="prometheus")

test_go('e2e-tests-prod', './test/e2e --ginkgo.label-filter="e2e && !demo"', '.',
        extra_args=["-v", "-race"],
        trigger_mode=TRIGGER_MODE_MANUAL,

        # run this test automatically in CI mode; otherwise, only on manual trigger
        auto_init=config.tilt_subcommand == 'ci',
        resource_deps=["opni-manager", "prometheus"])